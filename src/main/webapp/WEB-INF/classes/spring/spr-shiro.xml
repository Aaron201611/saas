<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://code.alibabatech.com/schema/dubbo
		http://code.alibabatech.com/schema/dubbo/dubbo.xsd
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd" >

	<description>Shiro Configuration</description>

	<!--
	<dubbo:application name="annotation-provider" />
	<dubbo:protocol name="dubbo" port="8888" />
	<dubbo:registry address="zookeeper://127.0.0.1:2181" /> 
	<dubbo:annotation package="com.yunkouan.saas" />
	-->

	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">	
         <property name="basenames">  
	         <list>  
	         	<value>classpath:message/valid</value>
				<value>classpath:message/message</value>
	         </list>  
         </property>  
         <!-- useCodeAsDefaultMessage一定要配成false，否则获取不到{min} 和 {max} -->
         <property name="useCodeAsDefaultMessage" value="false" /> 
         <property name="cacheSeconds" value="0"/> 
         <property name="defaultEncoding" value="UTF-8"/>  
	</bean>

    <!-- Shiro主过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
    	<!-- Shiro的核心安全接口 -->
        <property name="securityManager" ref="securityManager" />
        <!-- 登录页面地址，非必须的属性，默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
        <property name="loginUrl" value="${adminPath}/adminlogin/toLogin" />
        <!--  登录成功后要跳转的连接 -->
		<property name="successUrl" value="${adminPath}/adminlogin/success" />
		<property name="unauthorizedUrl" value="${adminPath}/adminlogin/toLogin" />
        <property name="filters">
            <map>
                <!-- 一般需要定制 com.yunkouan.saas.common.shiro.ExtendFormAuthenticationFilter -->
                <entry key="authc" value-ref="extendFormAuthenticationFilter"/>
            </map>
        </property>
        <!-- shiro连接约束配置,在这里使用自定义的动态获取资源类  一般需要定制  -->
        <!-- 对全部权限做定义，可以不用连接数据库 -->
		<property name="filterChainDefinitions">
			<value>
	        	/index.html=anon
	        	/static/css/**=anon
	        	/static/dist/**=anon
	        	/static/fonts/**=anon
	        	/static/img/**=anon
	        	/static/js/app*=anon
	        	/static/js/chunks/login*=anon
	        	${adminPath}/adminlogin/toLogin=anon
	        	${adminPath}/adminlogin/logout=anon
	        	${adminPath}/adminlogin/doLogin=anon
	        	${adminPath}/adminlogin/isTimeout=anon
	        	/static/js/chunks/epManagement*=authc,perms[org.view]
	        	/static/js/chunks/peopleMgmt*=authc,perms[people.view]
	        	/static/js/chunks/rightsMgmt*=authc,perms[rights.view]
	        	/static/js/chunks/sysSetting*=authc,perms[systemSaas]
	        	${adminPath}/**=authc
	        	/static/js/**=authc
			</value>
		</property>
    </bean>

	<!-- 定义Shiro安全管理配置 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- 一般需要定制 com.yunkouan.saas.common.shiro.SystemAuthorizingRealm -->
		<property name="realm" ref="systemAuthorizingRealm" />
		<property name="sessionManager" ref="sessionManager" />
		<!--
		<property name="cacheManager" ref="shiroCacheManager" />
		-->
	</bean>

	<!-- 本地内存缓存 -->
	<!--
	<bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.MemorySessionDAO"/>
	-->
	<!-- Redis缓存 -->
    <bean id="sessionDAO" class="com.yunkouan.cache.RedisCache4Shiro" >
        <property name="jedisConnectionFactory" ref="jedisConnectionFactory"></property>
    </bean>

	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<property name="sessionDAO" ref="sessionDAO"/>
        <!-- session的失效时长，单位毫秒 -->
        <property name="globalSessionTimeout" value="86400000"/>
        <!-- 删除失效的session -->
        <property name="deleteInvalidSessions" value="true"/>
    </bean>

	<!-- 会自动的调用和Spring整合后各个组件的生命周期方法 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

	<!-- 开启Shiro的注解(如@RequiresRoles，@RequiresPermissions)，需借助SpringAOP扫描使用Shiro注解的类 -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
    	<property name="securityManager" ref="securityManager"/>
	</bean>
</beans>